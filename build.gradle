/*
 * Copyright (c) 2017-2018, Sebastian Davids
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import static java.io.File.createTempFile
import static java.time.ZoneOffset.UTC
import static java.time.format.DateTimeFormatter.ISO_DATE_TIME

import java.time.OffsetDateTime

buildscript {
  ext {
    forbiddenapisVersion = '2.5'
  }

  repositories {
    jcenter()
  }

  // https://bintray.com/bintray/jcenter
  dependencies {
    classpath("de.thetaphi:forbiddenapis:${forbiddenapisVersion}")
  }
}

// https://plugins.gradle.org/
plugins {
  id 'net.nemerosa.versioning' version '2.7.1'
  id 'com.diffplug.gradle.spotless' version '3.14.0'
  id 'net.ltgt.errorprone' version '0.0.16'
  id 'ru.vyarus.animalsniffer' version '1.4.6'
  id 'com.jfrog.bintray' version '1.8.4'
}

ext {
  rootPackageName = 'io.sdavids.commons.entity'

  // https://bintray.com/bintray/jcenter
  errorproneVersion = '2.3.1'
  java8SignatureVersion = '1.0'
  checkerframeworkVersion = '2.5.2'
  junitVersion = '5.2.0'
  mockitoVersion = '2.19.0'
  assertjVersion = '3.10.0'

  nowIsoDateTime = OffsetDateTime.now(UTC).format(ISO_DATE_TIME)
  buildJdk = "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"
  vendor = 'Sebastian Davids'

  javadocLinks = [
      'http://docs.oracle.com/javase/8/docs/api/'
  ] as String[]
}

group 'io.sdavids.commons'
version = '1.2.0'

repositories {
  jcenter()
}

apply plugin: 'java-library'
apply plugin: 'de.thetaphi.forbiddenapis'
apply plugin: 'maven'

dependencies {
  signature("org.codehaus.mojo.signature:java18:${java8SignatureVersion}@signature")
  errorprone("com.google.errorprone:error_prone_core:${errorproneVersion}")

  api("org.checkerframework:checker-qual:${checkerframeworkVersion}")

  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testImplementation("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
  testImplementation("org.mockito:mockito-core:${mockitoVersion}")
  testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
  testImplementation("org.assertj:assertj-core:${assertjVersion}")
}

sourceCompatibility = '1.8'

compileJava.options.debugOptions.debugLevel = 'source,lines,vars'

[compileJava, compileTestJava]*.options.collect { options ->
  options.encoding = 'UTF-8'
}

[compileJava, compileTestJava]*.options.collect { options ->
  options.debug = true
  options.deprecation = true
  options.warnings = true
}

// http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCJCABJ
compileJava.options.collect { options ->
  options.compilerArgs << '-parameters'
  options.compilerArgs << '-Xlint:all,-processing,-path'
  options.compilerArgs << '-Werror'
}

// http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCJCABJ
compileTestJava.options.collect { options ->
  options.compilerArgs << '-parameters'
  options.compilerArgs << '-Xlint:all,-processing,-path'
}

jar {
  manifest {
    attributes(
        'Created-By': "Gradle ${gradle.gradleVersion}",
        'Built-By': project.author,
        'Build-Jdk': buildJdk,
        'Build-Time': nowIsoDateTime,
        'Build-Revision': versioning.info.commit,
        'Build-Host': "${InetAddress.localHost.hostName}",
        'Specification-Title': project.name,
        'Specification-Version': project.version,
        'Specification-Vendor': project.vendor,
        'Implementation-Title': project.name,
        'Implementation-Version': "${project.version}-${versioning.info.build}",
        'Implementation-Vendor': project.vendor,
        ("Version-${project.name}".toString().capitalize()): project.version,
        ("Time-${project.name}".toString().capitalize()): nowIsoDateTime,
        ("Revision-${project.name}".toString().capitalize()): versioning.info.commit,
        'Automatic-Module-Name': rootPackageName
    )
  }
}

forbiddenApis {
  // https://github.com/policeman-tools/forbidden-apis/wiki/BundledSignatures
  bundledSignatures = [
      'jdk-internal',
      'jdk-unsafe',
      'jdk-deprecated',
      'jdk-non-portable',
      'jdk-system-out',
      'jdk-reflection'
  ]
}

spotless {
  format 'misc', {
    target '.gitattributes', '.gitignore',
        'build.gradle', 'settings.gradle',
        'README.adoc',
        'release.sh',
        'CODING_STYLE.txt',
        'AUTHORS', 'CONTRIBUTORS', 'LICENSE', 'NOTICE'
    trimTrailingWhitespace()
    endWithNewline()
  }
  format 'properties', {
    target 'gradle.properties'
    encoding 'ISO-8859-1'
    trimTrailingWhitespace()
    endWithNewline()
  }
  format 'yaml', {
    target '.travis.yml'
    indentWithSpaces(2)
    trimTrailingWhitespace()
    endWithNewline()
  }
  format 'xml', {
    target 'gradle/conf/**/*.xml'
    indentWithSpaces(2)
    trimTrailingWhitespace()
    endWithNewline()
  }
  java {
    googleJavaFormat('1.6')
    licenseHeaderFile "${project.projectDir}/gradle/conf/spotless-license-java.txt"
  }
}

test {
  useJUnitPlatform()

  systemProperty 'user.timezone', System.properties['user.timezone']
  systemProperty 'user.language', System.properties['user.language']
  systemProperty 'user.country', System.properties['user.country']

  maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

  testLogging {
    exceptionFormat = 'full'
  }
}

wrapper {
  gradleVersion = '4.8.1'
  distributionType = 'ALL'
}

if (project.hasProperty('release')) {

  apply plugin: 'signing'
  apply plugin: 'maven-publish'

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc
  }

  task sourcesJar(type: Jar, dependsOn: compileJava) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  javadoc {
    options.encoding = 'UTF-8'
    options.memberLevel = 'PROTECTED'
    options.header = "${project.name} ${project.version}"
    options.docTitle = "${project.name} API"
    options.links = javadocLinks
    options.addStringOption '-quiet'
  }

  artifacts {
    archives javadocJar, sourcesJar
  }

  signing {
    sign configurations.archives
  }

  final pomConfig = {
    name "${project.name}"
    licenses {
      license {
        name 'Apache License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }
    developers {
      developer {
        id 'sdavids'
        name 'Sebastian Davids'
        email 'sdavids@gmx.de'
        timezone 'Europe/Berlin'
      }
    }
    scm {
      url 'https://github.com/sdavids/sdavids-commons-entity'
      connection 'scm:git:https://github.com/sdavids/sdavids-commons-entity.git'
    }
    issueManagement {
      system 'GitHub'
      url 'https://github.com/sdavids/sdavids-commons-entity/issues'
    }
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java

        artifact sourcesJar {
          classifier 'sources'
        }

        artifact javadocJar {
          classifier 'javadoc'
        }

        pom.withXml {
          asNode().children().last() + pomConfig

          // workaround
          // "Signing the generated POM file generated by this plugin is currently not supported."
          // https://docs.gradle.org/current/userguide/publishing_maven.html
          final tmp = createTempFile("generated-pom", ".xml")
          tmp.deleteOnExit()

          writeTo(tmp)

          final pomAscFile = signing.sign(tmp).signatureFiles[0]

          artifact(pomAscFile) {
            classifier = null
            extension = 'pom.asc'
          }

          tmp.delete()
          //
        }

        // workaround
        // asc files not uploaded
        project.tasks.signArchives.signatureFiles.each {
          artifact(it) {
            def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
            classifier = matcher.find() ? matcher.group(1) : null
            extension = 'jar.asc'
          }
        }
        //
      }
    }
  }

  bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['mavenJava']
    pkg {
      repo = 'sdavids'
      name = 'sdavids-commons-entity'
      licenses = ['Apache-2.0']
      websiteUrl = 'https://github.com/sdavids/sdavids-commons-entity'
      issueTrackerUrl = 'https://github.com/sdavids/sdavids-commons-entity/issues'
      vcsUrl = 'https://github.com/sdavids/sdavids-commons-entity.git'
      githubRepo = 'sdavids/sdavids-commons-entity'
      publicDownloadNumbers = true
      version {
        name = "${project.version}"
        vcsTag = "v${project.version}"
      }
    }
  }
}
